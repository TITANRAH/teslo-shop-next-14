instalar https://react-icons.github.io/react-icons/

siempre rafc y el primero para crear componentes

instalar zustand 

npm i zustand

paquete para condicionar clases
 npm install clsx

para swiper 
npm install swiper

https://swiperjs.com/
https://swiperjs.com/demos

para correr contenedor postgres
docker compose up -d

instalar prisma npm install prisma --save-dev
npx prisma init --datasource-provider PostgreSQL
https://www.prisma.io/docs/getting-started/quickstart

una vez creados los modelos hacer la migracion
npx prisma migrate dev --name ProductCategory 
se creara la carpeta migracion

para ejecutar codigo de ts en node 
paquete para solo desarrollo
 npm i -D ts-node

crear el script de seed en el package
"seed": "ts-node src/seed/seed-database.ts"
pero esto no basta
hay que ir a la carpeta de seed e instalar un ts.config.json
posicionandose con la consola en la carpeta seed y corriendo el comando
npx tsc --init
luego correr el npm run seed 

para crear cliente prisma : npx prisma generate

luego hacer las inserciones de la data que esta en duro 


o bien ir a https://www.prisma.io/docs/guides/other/troubleshooting-orm/help-articles/nextjs-prisma-client-dev-practices 

y copiar las mejores practicas para alojar el trozo de codigo 
en lib prisma.ts

$quot para colocar comillas entre comillas &quot

revalidate 
https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config


customizar los enlaces de url metadata 

https://nextjs.org/docs/app/building-your-application/optimizing/metadata


next auth 
https://nextjs.org/learn/dashboard-app/adding-authentication

npm install next-auth
npm install next-auth@beta

abrir git bach y ejecutar 

openssl rand -base64 32

esto entregara un numero copiar ese numero 
y crear variable de entorno 

dentro de src root de app crear archivo 
auth.config.ts

en este archivo redireccionar a nuestro login 
import type { NextAuthConfig } from 'next-auth';
 
export const authConfig : NextAuthConfig= {
  pages: {
    signIn: '/auth/login',
  },
}

instalar zod npm i zod

veremos dos formas de validacion desde el lado del cliente y del lado del servidor 

comviene siempre solo ocupar las hojas del lado del cliente el componente padre intentar que siempre sea del lado del servidor 

creamos modelos en prisma 

hacemos migracion 

 npx prisma migrate dev --name user-role


 instalar  npm i bcryptjs


 auntenticacion 

 crear vistas ->
 auth.config.ts -> action login.ts -> componets -> provider -> englobar app en el provider 
 -> en la raiz de la app nextauth.d.ts

https://react-hook-form.com/get-started
 npm install react-hook-form





 pasos para insercion de data nueva en prisma 

 primero la migracion: 

 crear Schema:

 model Country {
  id String @id
  name String
}


realizar migracion: 

npx prisma migrate dev --name country

se crea la tabla en la bd 

luego la insercion 

importar la data del seed-countries en el archivo de seed-database 


antes colocar el borrado al principio 

  import { countries } from './seed-countries';

   await prisma.country.deleteMany();

await prisma.country.createMany({
    data: countries
  })

  
y realizar insercion corriendo el comando de npm run seed declarado en el 
package json 

para este error app-index.js:34 Warning: Extra attributes from the server: cz-shortcut-listen 

tuve que colocar el compiler: ... en el archivo next.config.js hechar a andar la app y luego quitarlo bajar la app nuevamente y subirla 
y el error en consola desaparecio 

/** @type {import('next').NextConfig} */
const nextConfig = {
    compiler: {
        styledComponents: true
    }
}

module.exports = nextConfig

